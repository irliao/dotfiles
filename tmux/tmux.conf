# Tmux Configurations
# TODO: if Tmux is always qutting, make sure 'reattach-to-user-namespace' is installed with Brew

# Default Tmux aliases
# bind = bind-key
# set = set-option
# setw = set-window-option
# show = show-option
# showw = show-window-option

# TODO: cleanup unbind keys
# Unbinded Keys
unbind ^s
unbind -t vi-copy q
unbind -t vi-copy v
unbind -t vi-copy y
unbind -t vi-copy Enter
unbind -t vi-copy Escape
unbind Left
unbind Down
unbind Up
unbind Right
unbind A
unbind a
unbind B
unbind b
unbind c
unbind e
unbind n
unbind q
unbind t
unbind T
unbind w
unbind d
unbind D
unbind x
unbind i
unbind h
unbind j
unbind k
unbind l
unbind H
unbind J
unbind K
unbind L
unbind r
unbind p
unbind v
unbind u
unbind M
unbind m
unbind O
unbind o
unbind s
unbind S
unbind R
unbind Q
unbind V
unbind W
# unbind Escape
unbind Tab
unbind BTab # Shift + Tab
unbind `
unbind =
unbind %
unbind Enter
unbind Up
unbind Down

# Prefix set to ^s, holding ^ after prefix to execute more binded keys
unbind C-b
set -g prefix C-s
bind C-s send-prefix

# GNU-Screen compatible prefix
# set -g prefix2 C-a
# bind C-a send-prefix -2

# Defaults used for new windows
set -g default-shell $SHELL # login shell for new windows
setw -g xterm-keys on
set -g default-terminal "screen-256color" # make tmux display things in 256 colors
# setw -g alternate-screen off # prevent processes (e.g. Vim) from clearing screen on exit

# Vim-style copy/paste
set -g mode-keys vi # use h, j, k, and l to move around our buffer
bind v copy-mode # enter copy-mode
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
bind -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
bind -t vi-copy Escape clear-selection
bind -t vi-copy q cancel # exit copy-mode

# Navigation
bind -t vi-edit Up history-up
bind -t vi-edit Down history-down
bind \ select-window -t :+ \; refresh-client -S # switch window
bind a select-pane -t :.+ \; refresh-client -S # focus next pane

# Movement of windows.
bind -r < swap-window -t -1
bind -r > swap-window -t +1

# Make the prefix and 0 go to window number 10 (I use window numbering starting
# from 1).
bind 0 select-window -t :10

# Do not display the original window's name when renaming it. This makes
# renaming faster since one does not need to first erase the original name.
bind , command-prompt -p "(rename-window '#W')" "rename-window '%%'"

# Do the same for sessions.
bind '$' command-prompt -p "(rename-session '#S')" "rename-session '%%'"

# Window/Pane managements
bind M setw synchronize-panes \; display 'synchronize-panes toggled: #{?pane_synchronized, on, off} ' # toggle Mirroring (sync) pane
bind m command-prompt 'rename-window %%' # edit tab name
bind t new-window \; set -g status on # new window
bind T new-window -c "#{pane_current_path}" \; set -g status on # new window with current path
bind Enter break-pane \; set -g status on # maximize current pane into a new window
kill_pane_will_be_last_window="((#{session_windows} == 2 && #{window_panes} == 1))"
bind w if-shell "$kill_pane_will_be_last_window" "set -g status off \; kill-pane" "kill-pane"
kill_window_will_be_last_window="((#{session_windows} == 2))"
bind W if-shell "$kill_window_will_be_last_window" "set -g status off \; kill-window" "kill-window"
bind s split-window -h -c "#{pane_current_path}" # split to right keeping Env
bind S split-window -v -c "#{pane_current_path}" # split to bottom keeping Env

# Search
bind / copy-mode \; send-keys / # downward search (Vim-Style)
bind ? copy-mode \; send-keys ? # upward search (Vim-Style)

# Pane resizing indefinitely
bind -rn ^Left resize-pane -L
bind -rn ^Down resize-pane -D
bind -rn ^Up resize-pane -U
bind -rn ^Right resize-pane -R

# Pane resizing incrementally
bind -r Left resize-pane -L 10
bind -r Down resize-pane -D 10
bind -r Up resize-pane -U 10
bind -r Right resize-pane -R 10

# Vim-tmux-navigator, shell==vim ? vim-key : tmux-key
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind \ if-shell "$is_vim" "send-keys C-\\" "select-pane -l" # last split
bind n send-keys 'C-l' # clear screen for current pane
bind N send-keys 'C-l' \; clear-history
bind -n C-j if-shell "$is_vim" "send-keys C-d" "copy-mode \; send-keys C-d" # scroll half-page down
bind -n C-k if-shell "$is_vim" "send-keys C-u" "copy-mode \; send-keys C-u" # scroll half-page up
# bind -n C-J if-shell "$is_vim" "send-keys C-b" "copy-mode \; send-keys C-b" # scroll entire-page down
# bind -n C-K if-shell "$is_vim" "send-keys C-f" "copy-mode \; send-keys C-f" # scroll entire-page up

# Other shortcuts
bind ` set -g status # toggle statusline
bind r source-file ~/.tmux.conf \; display 'Reloaded ~/.tmux.conf'
bind R refresh-client -S
bind Q kill-server
bind u capture-pane \; save-buffer /tmp/tmux-buffer \; split-window -l 10 "urlview /tmp/tmux-buffer" # present menu of URLs to open at pane
bind : command-prompt

# TODO: research
# bind ] new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
# bind [ last-window \; swap-pane -s tmp.1 \; kill-window -t tmp
# bind S command-prompt "switch -t %1"

# General options
set -sg escape-time 0 # fixes delays when using escape key in terminal
set -g history-limit 20000 # needed to allow mouse to scroll up
set -g status-key vi
set -g repeat-time 0 # Allow the arrow key to be used immediately after changing windows
set -g base-index 1
set -g pane-base-index 1
set -g aggressive-resize on # TODO: not compatible with iTerm2
set -g focus-events on # TODO: research
set -g xterm-keys on # TODO: research

# Mouse options
set -g mouse on # allow mouse click
bind-key -t vi-copy WheelUpPane scroll-up
bind-key -t vi-copy WheelDownPane scroll-down

# restore and maximize pane
unbind Down
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# Appearance options
set -g set-titles off # window title of this running Terminal Application
# set -g set-titles-string "Terminal" # uses statusbar variables
set -g display-time 1500 # status-line message display time in milliseconds
set -g renumber-windows on # renumber windows after closing any window
set -g allow-rename on # enable auto-rename using Terminal escape sequence

# enable activity alerts
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
set -g monitor-activity off
set -g bell-action none

# clock
bind = clock
setw -g clock-mode-colour yellow
setw -g clock-mode-style 24

# lock
bind q lock-server
set -g lock-after-time 3600 # inactivity time till lock in seconds
set -g lock-command "tmux clock-mode"

# status bar
set -g status off
set -g status-position top
set -g status-interval 60 # refresh rate of status bar in seconds
set -g status-justify centre # center window list for clarity

# default statusbar colors
set -g status-bg default # set to default to color match with tomorrow-night theme
set -g status-attr default

# status bar left side
set -g status-left-length 25
set -g status-left "#[fg=colour4]#(whoami)#[fg=white] | #[fg=colour9]#(echo 'level:$SHLVL') #[fg=colour10]#{?client_prefix,#[fg=cyan]^S,}"

# status bar right side
set -g status-right-length 40
set -g status-right "#[fg=blue]#(ifconfig en0 | grep 'inet ' | awk '{ printf $2 } END { if (!NR) print \"no-wifi\" }')#[fg=white] | #(~/.bin/battery.sh -t)#[fg=white]| #[fg=colour15]%H:%M"
# set -g status-right-bg red # TODO: used only to debug status-line

# status bar middle (focused window)
set -g window-status-current-fg red
set -g window-status-current-bg default
set -g window-status-current-attr bright
set -g window-status-current-format "[#W]"

# status bar middle (all windows)
set -g window-status-fg white
set -g window-status-bg default
set -g window-status-attr default
set -g window-status-format "#I:#W"
set -g window-status-separator " "

# Vim's Tmuxline, check file exists before sourcing it in tmux.conf
# if-shell "test -f ~/.tmux/tmuxline_snapshot.sh" "source ~/.tmux/tmuxline_snapshot.sh"

# pane border
set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour10

# prompt text from Tmux
set -g message-bg black
set -g message-fg red

# pane number text
set -g display-panes-time 2000 # display Tmux alert for 2 sec
set -g display-panes-active-colour blue
set -g display-panes-colour brightred

# Override plugin hotkeys, requires prefix
set -g @urlview-key 'u' # default is 'u'

# Plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-battery'

# install tpm automatically when tmux is started
if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

# initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# Deprecated

# use UTF8
# set -g utf8
# set-window-option -g utf8 on
# set -g mouse-utf8 on
# setw -g status-utf8 on

# Allow copy to Mac OSX pasteboard using yank with mouse highlight
# bind -n WheelUpPane copy-mode
# set -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'" # enable native Mac OS X copy/paste
# if -b 'which -s reattach-to-user-namespace' 'bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# if -b 'which -s reattach-to-user-namespace' 'bind p run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"'
# bind C-v run "tmux set-buffer \"$(xsel -ob)\"; tmux paste-buffer" # move x clipboard into tmux paste buffer
# bind C-c run "tmux show-buffer | xsel -ib" # move tmux copy buffer into x clipboard

# TODO: replaced by vim-tmux-navigator
# Pane switching prioritizing Tmux (pane)
# bind H select-pane -L
# bind J select-pane -D
# bind K select-pane -U
# bind L select-pane -R

# bind -n C-j copy-mode \; send-keys C-d # scroll half-page down TODO: replaced by vim-tmux-navigator
# bind -n C-k copy-mode \; send-keys C-u # scroll half-page up TODO: replaced by vim-tmux-navigator

# Disable Mouse, pass control directly to the used terminal emulator, allows copy/paste as if not running Tmux
# if-shell "[[ `tmux -V | cut -d' ' -f2` -lt 2.1 ]]" "setw -g mode-mouse off" # tmux < v2.1:
# if-shell "[[ `tmux -V | cut -d' ' -f2` -ge 2.1 ]]" "setw -g mouse off" # tmux >= v2.1:

