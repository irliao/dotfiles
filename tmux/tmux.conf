# vim: ft=tmux
# Tmux Configurations
# WARN: if Tmux is always qutting, make sure 'reattach-to-user-namespace' is installed with Brew

# ******** CONFIGS IN THIS BLOCK SHOULD STAY AT THE VERY TOP OF THIS FILE *******
set-option -g default-shell "${SHELL}"
# set-option -g default-command "reattach-to-user-namespace -l ${SHELL}"
# set-option -g default-command 'command -v reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace -l "$SHELL" || exec "$SHELL"'
# ******** CONFIGS IN THIS BLOCK SHOULD STAY AT THE VERY TOP OF THIS FILE *******

# unbind everything and start binding from scratch
unbind-key -a

# M-key for Alt + key, C-key for Ctrl + key
# set -g prefix C-;
# unbind C-b
# bind C-a send-prefix

setw -g mode-keys vi # vim movement in copy mode and buffer
set -g mouse on

set -g default-terminal "screen-256color" # make tmux display things in 256 colors
set-window-option -g xterm-keys on # set on to allow Ctrl-PgUp and Ctrl-PgDn work in vim, NOTE: maybe BUGGY
# set -ga terminal-overrides ',screen-256color:Tc'
# set-option -ga terminal-overrides ',st-256color:Tc'
set-option -ga terminal-overrides ',xterm-256color:Tc'
# prevent tmux from catching modifier keys meant for Vim
set-option -s escape-time 1
# set -g default-terminal "xterm-256color"
# set-option -ga terminal-overrides ",screen-256color:Tc"
# set-option -g  default-terminal   'tmux-256color'
# set-option -ga terminal-overrides ',xterm-256color:Tc'

set -sg escape-time 0 # fixes delays when using escape key in terminal
# set -sg repeat-time 500
set -g base-index 1 # window starting index
set -g pane-base-index 1 # pane starting inde

# TODO: investigate how this works
# bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
# bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# Mouse enabled
# bind -Troot WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
# bind -Troot WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
# bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
# bind -n WheelDownPane select-pane -t= send-keys -M
# bind -T copy-mode-vi WheelUpPane send -X scroll-up
# bind -T copy-mode-vi WheelDownPane send -X scroll-down

# Stay in copy mode when visually selecting
# unbind -T copy-mode-vi MouseDragEnd1Pane
# bind -T copy-mode-vi MouseUp1Pane send -X cancel

# Defaults used for new windows
# set -g alternate-screen on # set off to allow processes (e.g. Vim) from clearing screen on exit
# set -g assume-paste-time 0 # set to 0 to enable Send Hex Codes in iTerm2

# General options
set -g history-limit 50000 # needed to allow mouse to scroll up
set -g repeat-time 0 # Allow the arrow key to be used immediately after changing windows
set -g focus-events on # WARN: required by vim-tmux-focus-events
# setw -g force-height 0 # max height size, 0 for unlimited size (default)
# setw -g force-width 0 # max width size, 0 for unlimited size (default)

# Copy/Paste into System Clipboard and Tmux buffer
bind v copy-mode # enter Normal mode
bind V copy-mode \; send-keys v # enter Visual mode
# WARN: setting default-command to reattach-to-user-namespace conflicts with copy-mode-vi and copy-pipe-and-cancel
bind-key -T copy-mode-vi v send -X begin-selection # go from Copy-Mode to Visual-Mode
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
# bind -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy" # reattach-to-user-namespace not needed in Tmux 2.6
# bind -T copy-mode-vi y send -X copy-pipe pbcopy # yank visually selected
# bind -T copy-mode-vi Y send -X copy-selection # yank visually selected
# bind -T copy-mode-vi V send -X rectangle-toggle # `V` changes between line- and columnwise selection
# bind b choose-buffer # paste-buffer # `prefix + p` pastes the latest buffer
# bind p copy-mode \; send ggvGy # yank content of entire pane
# bind -r P paste-buffer

# Copy/Paste into OSX clipboard
is_osx="uname | /usr/bin/grep -q Darwin"
if-shell "$is_osx" "set -g default-command 'reattach-to-user-namespace -l zsh'"
if-shell "$is_osx" "bind-key -T copy-mode-vi Enter send -X copy-pipe 'reattach-to-user-namespace pbcopy'"
if-shell "$is_osx" "bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe 'reattach-to-user-namespace pbcopy'"
# if-shell "$is_osx" "bind-key -T copy-mode-vi y copy-pipe 'reattach-to-user-namespace pbcopy'" # WARN: comment out if using tmux-copycat plugin (this key should be binded the same way by the plugin)
# bind -T copy-mode-vi Escape clear-selection # WARN: comment out if using tmux-copycat plugin (this key should be binded the same way by the plugin)
# bind -T copy-mode-vi q cancel # exit copy-mode # WARN: comment out if using tmux-copycat plugin (this key should be binded the same way by the plugin)

# Copy/Paste into system buffer
bind -n C-y run "tmux save-buffer - | reattach-to-user-namespace pbcopy" # TODO: fix broken
bind -n C-v run "tmux set-buffer $(reattach-to-user-namespace pbpaste); tmux paste-buffer" # TODO: fix broken

# Window arrangement
bind -r [ swap-pane -t -1
bind -r ] swap-pane -t +1
# bind -r { swap-window -t -1
# bind -r } swap-window -t +1
# bind + command-prompt -p "join pane from:"  "join-pane -s '%%'" # grab first pane from target window and join with current, aka receiving a pane
# bind - command-prompt -p "send pane to:"  "join-pane -t '%%'" # grab current pane and join to target window, aka sending pane away
bind + break-pane \; setw -g status on # maximize current pane into a new window
bind - join-pane \; setw -g status on # join current pane with last into one window # TODO: remap, S-Enter not valid key
# bind -r ( switch-client -p
# bind -r ) switch-client -n
# bind \ swap-window -t 1 # make current window first window TODO: bind to another key (leader-\ in Vim cycles tabs)
# bind C-n swap-pane -s :+.top \; rotate-window -Ut :+ # rotate pane to the right
# bind C-p swap-pane -s :+.bottom \; rotate-window -Dt :+ # rotate pane to the left

# Pane management
bind -n C-h select-pane -t :.- # cycle to next pane
bind -n C-l select-pane -t :.+ # cycle to next pane
# bind -n C-q select-pane -t :.-
# bind a select-pane -l # cycle to last visited pane
# bind h select-pane
bind -n C-s split-window -h -c "#{pane_current_path}" # split to right keeping Env
bind -n C-x split-window -v -c "#{pane_current_path}" # split to bottom keeping Env
bind Enter resize-pane -Z # toggle zoom on current pane
bind M run "cut -c3- ~/.tmux.conf | sh -s toggle_mouse"
bind r split-window -h -c "#{pane_current_path}" \; select-pane -l \; kill-pane # new pane over current pane to source Env changes
kill_pane_will_be_last_window="((#{session_windows} == 2 && #{window_panes} == 1))"
bind -n C-w if-shell "$kill_pane_will_be_last_window" "set -g status off \; kill-pane" "kill-pane"

# Window management
bind Tab select-window -t :+ # next window, -t to cycle window, -l to go to last window
# bind S-Tab select-window -t :- # previous window, -t to cycle window, -l to go to last window TODO: S-Tab not working as Shift-Tab
# bind N new-window -c "#{pane_current_path}" \; select-window -l \; kill-window # new window over current window to source Env changes
# bind t new-window \; setw -g status on # new window
bind t new-window -c "#{pane_current_path}" \; setw -g status on # new window with current path
bind T respawn-pane # TODO: make respawn behave like browser's Cmd+Shift+t
bind 0 select-window -t :10 # select 10th Window Tab
kill_window_will_be_last_window="((#{session_windows} == 2))"
bind W if-shell "$kill_window_will_be_last_window" "set -g status off \; kill-window" "kill-window"

# NOTE: required by Vim-Tmux-navigator
# Pane resizing indefinitely... optionally provide a number after -LDUR to resize by number unit
# bind -rn C-Left resize-pane -L
# bind -rn C-Down resize-pane -D
# bind -rn C-Up resize-pane -U
# bind -rn C-Right resize-pane -R
# bind -rn C-\ select-pane -l

# enable smart pane switching with awareness of vim splits
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
# bind C-l send-keys 'C-l'

# bind-key -n S-Up set-option -g status
# bind-key -n S-Down set-option -g status
# bind-key -n S-Left previous-window
# bind-key -n S-Right next-window

# Vim-Tmux-navigator, shell==vim ? vim-key : tmux-key
# NOTE: do not use tmux plugin 'christoomey/vim-tmux-navigator'... snippet below is same as using the plugin
# NOTE: LDUR mapped to Ctrl + HJKL in Hammerspoon for external keyboards
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind -n Left if-shell "$is_vim" "send-keys C-l" "select-pane -R" # mainly used to go from Vim to Tmux pane
# bind -n Down if-shell "$is_vim" "send-keys C-d" "copy-mode \; send-keys C-d" # scroll half page down
# bind -n Up if-shell "$is_vim" "send-keys C-u" "copy-mode \; send-keys C-u" # scroll half page up
# bind -n Right if-shell "$is_vim" "" "send-keys -R \; send-keys C-l \; clear-history" # Ctrl-L to clear current scroll buffer
# bind -n Right if-shell "$is_vim" "send-keys C-l" "select-pane -R" # mainly used to go from Vim to Tmux pane

# Other shortcuts
bind ` set status # toggle statusline, TODO: bind to DC (Delete key)
bind e command-prompt -p "(rename-window '#W')" "rename-window '%%'"
bind , new-window -n 'tmux.comf*' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"
bind m setw synchronize-panes \; display "synchronize-panes toggled: #{?pane_synchronized, on, off}" # toggle Mirroring (sync) pane
bind R source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf" \; refresh-client
# bind U capture-pane \; save-buffer /tmp/tmux-buffer \; split-window -l 10 "urlview /tmp/tmux-buffer" # NOTE: exactly same as tmux-urlview plugin
bind \; command-prompt # WARN: ';' is invalid key to bind to

# Appearance options
set -g set-titles on # title bar text of the App (only visible when not in fullscreen), ex: Terminal.app or iTerm.app
set -g set-titles-string "#[fg=colour4]#(whoami) #[fg=red]#(ip)"
# set -g set-titles-string '#H:#S.#I.#P #W #T' # set title bar text to window number,program name,active (or not)
# set -g set-titles-string "$SHELL : Level-$SHLVL" # set title bar text to shell level
setw -g automatic-rename on # automatically rename tabs in status bar with specified window-status-format
set -g display-time 1500 # status-line message display time in milliseconds
set -g renumber-windows on # renumber windows after closing any window
set -g allow-rename on # set on to enable auto-rename using Terminal escape sequence

# enable activity alerts
set -g monitor-activity on
set -g visual-activity on
set -g visual-bell off
set -g visual-silence off
set -g bell-action none
# set-option -ga update-environment ' ITERM_PROFILE'

# clock
set -g clock-mode-colour yellow
set -g clock-mode-style 24

# lock
bind q lock-server
set -g lock-after-time 3600 # inactivity time till lock in seconds
set -g lock-command "tmux clock-mode"

# status bar
setw -g status off
set -g status-position top
set -g status-interval 60 # refresh rate of status bar in seconds
set -g status-justify left # center window list for clarity

# default statusbar colors
set -g status-bg default # set to default to color match with tomorrow-night theme
set -g status-style default

# status bar v2
set -g status-left-length 60
# set -g status-left "#[fg=colour4]#(whoami) #[fg=red]#(ip)#[fg=white] #{?client_prefix,#[fg=red]^S,}#{?pane_in_mode,#[fg=yellow]Vi,}"
set -g status-left "#{?client_prefix,#[fg=red]^S,}#{?pane_in_mode,#[fg=green]NORMAL,} "
set -g status-right-length 60
# set -g status-right "#[fg=blue]#(ip) #[fg=white]#(tmux display-message -p '#S' | tr '[:upper:]' '[:lower:]') #[fg=green]#{battery_percentage} #[fg=white]| #[fg=colour15]%H:%M"
set -g status-right "#[fg=blue]#(ip) #[fg=green]#{battery_percentage} #[fg=white]| #[fg=colour15]%H:%M"

# TODO: enhance status-line with colors like following example below:
# set -g status-right '#{battery_status_bg} Batt: #{battery_icon} #{battery_percentage} #{battery_remain} | %a %h-%d %H:%M '

# bind-key + select-layout main-horizontal
# bind-key = select-layout main-vertical
# set-window-option -g other-pane-height 25
# set-window-option -g other-pane-width 80

# status bar middle segment text (focused window)
set -g window-status-current-style fg=red,bg=default,bright
set -g window-status-current-format "#W#[fg=cyan]#F" # alternative: #[fg=colour234,bg=colour39] #W"

# status bar middle segment text (inactive windows)
set -g window-status-style fg=white,bg=default,dim
set -g window-status-format "#[fg=colour244]#I:#[fg=white]#W#[fg=colour244]#F" # alternative: "#[fg=white,bg=colour234] #I #W "

# dim unfocused window with style
set -g window-style 'fg=colour247,bg=colour240' # dim inactive window, good value is fg,bg=247,236
set -g window-active-style 'fg=colour250,bg=black' # normal active window

# pane border
set -g pane-border-style fg=colour238,bg=colour235
set -g pane-active-border-style fg=colour10,bg=colour236

# prompt text from Tmux
set -g message-style fg=yellow,bg=black,none

# pane number text
set -g display-panes-time 3000 # display Tmux alert for 2 sec
set -g display-panes-active-colour blue
set -g display-panes-colour brightred

# Plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery' # battery in status bar
set -g @plugin 'tmux-plugins/tmux-copycat' # enhances search
set -g @plugin 'tmux-plugins/tmux-logging' # log output in current pane
set -g @plugin 'jbnicolai/tmux-fpp' # open path with $EDITOR
set -g @plugin 'tmux-plugins/tmux-open' # open highlighted item
set -g @plugin 'tmux-plugins/tmux-sensible' # useful settings and functions
set -g @plugin 'tmux-plugins/tmux-urlview' # list openable urls on screen, WARN: requires urlview or extract_url from brew
set -g @plugin 'tmux-plugins/tmux-yank' # copy to system clipboard
set -g @plugin 'nhdaly/tmux-scroll-copy-mode'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'

# TODO: read ttps://github.com/tmux-plugins/tmux-logging to learn how to save pane's output to file

# Plugin customization
# set -g @open 'x' # open wih default program
# set -g @open-editor 'C-x' # open file with $EDITOR
# set -g @urlview-key 'u' # default: u
# set -g @fpp-key 'x' # default: f
# set -g @scroll-down-exit-copy-mode "off"
# set -g @scroll-without-changing-pane "on"
# set -g @scroll-speed-num-lines-per-scroll "1"
# set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

# install tpm automatically when tmux is started
if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

# initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run "~/.tmux/plugins/tpm/tpm"

# Fixes iterm2 integration. Should go after "run '~/.tmux/plugins/tpm/tpm'"
setw -g aggressive-resize off
