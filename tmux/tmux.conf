# vim: ft=tmux
# Tmux Configurations
# WARN: if Tmux is always qutting, make sure 'reattach-to-user-namespace' is installed with Brew

# M-key for Alt + key, C-key for Ctrl + key
set -g prefix C-s
unbind C-b
# bind C-s send-prefix # TODO: enable when keys are fixed in osx 10.12
set -sg escape-time 0 # fixes delays when using escape key in terminal
set -g base-index 1 # window starting index
set -g pane-base-index 1 # pane starting inde

# Mouse disabled
# set -g mouse off
# unbind -t vi-copy WheelUpPane
# unbind -t vi-copy WheelDownPane
# unbind -T root WheelUpPane
# unbind -T root WheelDownPane

# TODO: investigate how this works
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# Mouse enabled
set -g mouse on
bind -t vi-copy WheelUpPane scroll-up
bind -t vi-copy WheelDownPane scroll-down
# bind -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
# bind -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# Defaults used for new windows
set -g default-shell "$SHELL"
set -g default-terminal "screen-256color" # make tmux display things in 256 colors
set -g default-command "reattach-to-user-namespace -l $SHELL" # set -l "zsh" allows subl to open file from Terminal
# set -g xterm-keys on # set on to allow Ctrl-PgUp and Ctrl-PgDn work in vim, maybe BUGGY
# set -g alternate-screen on # set off to allow processes (e.g. Vim) from clearing screen on exit
# set -g assume-paste-time 0 # set to 0 to enable Send Hex Codes in iTerm2

# General options
set -g mode-keys vi # vim movement in copy mode and buffer
set -g history-limit 50000 # needed to allow mouse to scroll up
set -g repeat-time 0 # Allow the arrow key to be used immediately after changing windows
set -g focus-events on # WARN: required by vim-tmux-focus-events
set -g aggressive-resize off
# setw -g force-height 0 # max height size, 0 for unlimited size (default)
# setw -g force-width 0 # max width size, 0 for unlimited size (default)

# Copy/Paste into System Clipboard and Tmux buffer
bind v copy-mode
bind V copy-mode \; send-keys v
bind -t vi-copy v begin-selection # go from Copy-Mode to Visual-Mode
bind -t vi-copy y copy-selection
bind -t vi-copy V rectangle-toggle # `V` changes between line- and columnwise selection
bind b choose-buffer # paste-buffer # `prefix + p` pastes the latest buffer

# Copy/Paste into OSX clipboard
# bind -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# bind -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
# bind M-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
# bind M-v run "tmux set-buffer $(reattach-to-user-namespace pbpaste); tmux paste-buffer"
# bind -t vi-copy Escape clear-selection # WARN: disable if using tmux-copycat
# bind -t vi-copy q cancel # exit copy-mode # WARN: disable if using tmux-copycat
bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"

# Window arrangement
bind -r [ swap-pane -t -1
bind -r ] swap-pane -t +1
bind -r { swap-window -t -1
bind -r } swap-window -t +1
bind + command-prompt -p "join pane from:"  "join-pane -s '%%'" # grab first pane from target window and join with current, aka receiving a pane
bind - command-prompt -p "send pane to:"  "join-pane -t '%%'" # grab current pane and join to target window, aka sending pane away
# bind -r ( switch-client -p
# bind -r ) switch-client -n
# bind \ swap-window -t 1 # make current window first window TODO: bind to another key (leader-\ in Vim cycles tabs)

# Pane management
bind a select-pane -t :.- # cycle to next pane
# bind a select-pane -l
bind s split-window -h -c "#{pane_current_path}" # split to right keeping Env
bind S split-window -v -c "#{pane_current_path}" # split to bottom keeping Env
bind m resize-pane -Z # toggle zoom on current pane
bind M run "cut -c3- ~/.tmux.conf | sh -s toggle_mouse"
bind r split-window -h -c "#{pane_current_path}" \; select-pane -l \; kill-pane # new pane over current pane to source Env changes
kill_pane_will_be_last_window="((#{session_windows} == 2 && #{window_panes} == 1))"
bind w if-shell "$kill_pane_will_be_last_window" "set -g status off \; kill-pane" "kill-pane"

# Window management
bind Tab select-window -t :+ # next window, -t to cycle window, -l to go to last window
# TODO: broken, replace S-Tab with correct Shift-Tab syntax
# bind S-Tab select-window -t :- # previous window, -t to cycle window, -l to go to last window
bind N new-window -c "#{pane_current_path}" \; select-window -l \; kill-window # new window over current window to source Env changes
bind 0 select-window -t :10 # select 10th Window Tab
kill_window_will_be_last_window="((#{session_windows} == 2))"
bind W if-shell "$kill_window_will_be_last_window" "set -g status off \; kill-window" "kill-window"
bind t new-window \; set -g status on # new window
bind T new-window -c "#{pane_current_path}" \; set -g status on # new window with current path

# NOTE: required by Vim-Tmux-navigator
# Pane resizing indefinitely... optionally provide a number after -LDUR to resize by number unit
bind -rn C-Left resize-pane -L
bind -rn C-Down resize-pane -D
bind -rn C-Up resize-pane -U
bind -rn C-Right resize-pane -R
bind -rn C-\ select-pane -l

# Vim-Tmux-navigator, shell==vim ? vim-key : tmux-key
# NOTE: do not use tmux plugin 'christoomey/vim-tmux-navigator'... snippet below is same as using the plugin
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# NOTE: LDUR mapped to Ctrl + HJKL in Hammerspoon
bind -n Left if-shell "$is_vim" "send-keys C-l" "select-pane -R" # mainly used to go from Vim to Tmux pane
bind -n Down if-shell "$is_vim" "send-keys C-d" "copy-mode \; send-keys C-d" # scroll half page down
bind -n Right if-shell "$is_vim" "send-keys C-l" "select-pane -R" # mainly used to go from Vim to Tmux pane
bind -n Up if-shell "$is_vim" "send-keys C-u" "copy-mode \; send-keys C-u" # scroll half page up
bind k if-shell "$is_vim" "" "send-keys -R \; send-keys C-l \; clear-history" # clear current scroll buffer
# bind C-n swap-pane -s :+.top \; rotate-window -Ut :+ # rotate pane to the right
# bind C-p swap-pane -s :+.bottom \; rotate-window -Dt :+ # rotate pane to the left

# Other shortcuts
bind ` set status # toggle statusline
bind e command-prompt -p "(rename-window '#W')" "rename-window '%%'"
bind , new-window -n 'tmux.comf*' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"
bind = setw synchronize-panes \; display "synchronize-panes toggled: #{?pane_synchronized, on, off}" # toggle Mirroring (sync) pane
bind R source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf" \; refresh-client
# bind R refresh-client # TODO: figure out how refresh-client is useful
# bind u capture-pane \; save-buffer /tmp/tmux-buffer \; split-window -l 10 "urlview /tmp/tmux-buffer" # present menu of URLs to open at pane
bind \; command-prompt # WARN: ';' is invalid key to bind to

# restore and maximize pane
bind Enter break-pane \; set -g status on # maximize current pane into a new window
bind S-Enter join-pane \; set -g status on # join current pane with last into one window

# Appearance options
set -g set-titles on # app's top title bar
set -g set-titles-string '#H:#S.#I.#P #W #T' # window number,program name,active (or not)
# set -g set-titles-string "$SHELL : Level-$SHLVL" # set Terminal app's title, requires set-titles on
set -g automatic-rename on # automatically rename tabs in status bar with specified window-status-format
set -g display-time 1500 # status-line message display time in milliseconds
set -g renumber-windows on # renumber windows after closing any window
set -g allow-rename off # set on to enable auto-rename using Terminal escape sequence

# enable activity alerts
set -g monitor-activity off
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
set -g bell-action none

# clock
set -g clock-mode-colour yellow
set -g clock-mode-style 24

# lock
bind q lock-server # TODO: resolve bindkey conflict
set -g lock-after-time 3600 # inactivity time till lock in seconds
set -g lock-command "tmux clock-mode"

# status bar
set -g status off
set -g status-position top
set -g status-interval 60 # refresh rate of status bar in seconds
set -g status-justify centre # center window list for clarity

# default statusbar colors
set -g status-bg default # set to default to color match with tomorrow-night theme
set -g status-attr default

# status bar v2
set -g status-left-length 60
set -g status-left "#[fg=colour4]#(whoami) #[fg=red]#(ip)#[fg=white] #{?client_prefix,#[fg=red]^S,}#{?pane_in_mode,#[fg=yellow]Vi,}"
set -g status-right-length 60
set -g status-right "#[fg=green]#{battery_percentage} #[fg=white]| #[fg=colour15]%H:%M"

# TODO: enhance status-line with colors like following example below:
# set -g status-right '#{battery_status_bg} Batt: #{battery_icon} #{battery_percentage} #{battery_remain} | %a %h-%d %H:%M '

# bind-key + select-layout main-horizontal
# bind-key = select-layout main-vertical
# set-window-option -g other-pane-height 25
# set-window-option -g other-pane-width 80

# status bar middle segment text (focused window)
set -g window-status-current-fg red
set -g window-status-current-bg default
set -g window-status-current-attr bright
set -g window-status-current-format "#W" # alternative: #[fg=colour234,bg=colour39]"

# status bar middle segment text (inactive windows)
set -g window-status-fg white
set -g window-status-bg default
set -g window-status-attr default
set -g window-status-format "#I-#W" # alternative: "#[fg=white,bg=colour234] #I #W "

# dimmed window style when unfocused
set -g window-style 'fg=colour247,bg=colour240' # dim inactive window, good value is fg,bg=247,236
set -g window-active-style 'fg=colour250,bg=black' # normal active window

# pane border
set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour10

# prompt text from Tmux
set -g message-bg black
set -g message-fg yellow

# pane number text
set -g display-panes-time 2000 # display Tmux alert for 2 sec
set -g display-panes-active-colour blue
set -g display-panes-colour brightred

# Plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery' # battery in status bar
set -g @plugin 'tmux-plugins/tmux-copycat' # enhances search
set -g @plugin 'tmux-plugins/tmux-logging' # log output in current pane
set -g @plugin 'jbnicolai/tmux-fpp' # open path with $EDITOR
set -g @plugin 'tmux-plugins/tmux-open' # open highlighted item
set -g @plugin 'tmux-plugins/tmux-sensible' # useful settings and functions
set -g @plugin 'tmux-plugins/tmux-urlview' # list openable urls on screen, WARN: requires urlview or extract_url from brew
set -g @plugin 'tmux-plugins/tmux-yank' # copy to system clipboard
set -g @plugin 'nhdaly/tmux-scroll-copy-mode'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'

# TODO: read ttps://github.com/tmux-plugins/tmux-logging to learn how to save pane's output to file

# Plugin customization
# set -g @open 'x' # open wih default program
# set -g @open-editor 'C-x' # open file with $EDITOR
# set -g @urlview-key 'u' # default: u
# set -g @fpp-key 'x' # default: f
set -g @scroll-down-exit-copy-mode "off"
set -g @scroll-without-changing-pane "on"
set -g @scroll-speed-num-lines-per-scroll "1"
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

# install tpm automatically when tmux is started
if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

# initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run-shell ~/.tmux/plugins/tmux-sensible/sensible.tmux
run "~/.tmux/plugins/tpm/tpm"

# Deprecated or Unused

# GNU-Screen compatible prefix
# set -g prefix2 C-a
# bind C-a send-prefix -2

# Xterm copy/paste
# set-option -ga terminal-overrides ",xterm*:Tc:smcup@:rmcup@"
# set-option -ga terminal-overrides ",screen*:Tc:smcup@:rmcup@"
# set -g terminal-overrides 'xterm*:smcup@:rmcup@' # use default scrollback buffer over alternative screen
# set -g terminal-overrides "xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC"

# Vim's Tmuxline, check file exists before sourcing it in tmux.conf
# if-shell "test -f ~/.tmux/tmuxline_snapshot.sh" "source ~/.tmux/tmuxline_snapshot.sh"

# TODO: Search... currently replaced by Tmux-Copycat
# bind / copy-mode \; send-keys / # downward search (Vim-Style)
# bind ? copy-mode \; send-keys ? # upward search (Vim-Style)

# bind \ select-window -t :+ \; refresh-client -S # switch window
# bind S command-prompt "switch -t %1" # switch to session with name
# bind '$' command-prompt -p "(rename-session '#S')" "rename-session '%%'" # rename session

# Allow copy to Mac OSX pasteboard using yank with mouse highlight
# set -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'" # enable native Mac OS X copy/paste
# if -b 'which -s reattach-to-user-namespace' 'bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# if -b 'which -s reattach-to-user-namespace' 'bind p run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"'
# bind C-v run "tmux set-buffer \"$(xsel -ob)\"; tmux paste-buffer" # move x clipboard into tmux paste buffer
# bind C-c run "tmux show-buffer | xsel -ib" # move tmux copy buffer into x clipboard

# Disable Mouse, pass control directly to the used terminal emulator, allows copy/paste as if not running Tmux
# if-shell "[[ `tmux -V | cut -d' ' -f2` -lt 2.1 ]]" "setw -g mode-mouse off" # tmux < v2.1:
# if-shell "[[ `tmux -V | cut -d' ' -f2` -ge 2.1 ]]" "setw -g mouse off" # tmux >= v2.1:
