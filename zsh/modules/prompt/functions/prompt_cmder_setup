# vim: ft=zsh
#
# Cmder Theme
# @author: Ryan Liao - irliao
#

# TODO: implement functionality to toggle color theme and git branch display style

# TODO: refactor with named colors below OR load and use "colors" module
# named colors for base16-default-dark theme
# local red = "%F{1}"
# local green = "%F{2}"
# local yellow = "%F{3}"
# local blue = "%F{4}"
# local magenta= "%F{5}"
# local cyan = "%F{6}"
# local white = "%F{7}"
# local gray = "%F{8}"

# set iTerm tab
prompt_iterm_preexec() {
  # TODO: figure out what this does
  echo -ne "\e]1; $(history $HISTCMD | cut -b7- ) \a" # set title to last command
}

# indent prompt by printing spaces
gst_get_prefix() {
  print " "
}

# shows icon for start of input with color to indicate return status of last command
gst_get_suffix() {
  # local suffix='❯' # TODO: replace suffix character with variable in print
  print "%(?:%F{7}λ%f :%F{8}λ%f %s)" # success/failure - white/gray
  # print "%(?:%F{7}λ%f :%F{8}λ%f)" # success/failure - white/gray
}

# run before $(git_current_branch) to have branch name display with color based on git status
parse_git_dirty() {
  local STATUS=''
  local FLAGS
  FLAGS=('--porcelain' '--ignore-submodules=dirty')
  if [[ ${zgit_hide_prompt} != 'true' ]]; then
    if [[ "${zgit_disable_untracked_dirty}" == "true" ]]; then
      FLAGS+='--untracked-files=no'
    fi
    STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1)
  fi
  if [[ -n ${STATUS} ]]; then
    print ${ZSH_THEME_GIT_PROMPT_DIRTY}
  else
    print ${ZSH_THEME_GIT_PROMPT_CLEAN}
  fi
}

# prints name of current branch
git_current_branch() {
  # git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///' # TODO: check if this is more useful
  git symbolic-ref --short HEAD 2> /dev/null;
}

# prints hash of current commit
git_current_commit() {
  git rev-parse --short HEAD 2> /dev/null;
}

git_prompt_info() {
  local ref
  if [[ ${zgit_hide_prompt} != 'true' ]]; then
    ref=$(git_current_branch) || \
      ref=$(git_current_commit) || \
      return 0
    # print "${ZSH_THEME_GIT_PROMPT_PREFIX}${ref}$(parse_git_dirty)${ZSH_THEME_GIT_PROMPT_SUFFIX}"
    print "$(parse_git_dirty)${ref}${ZSH_THEME_GIT_PROMPT_SUFFIX}"

  fi
}

# shortens the pwd for use in prompt
short_pwd() {
 local current_dir="${1:-${PWD}}"
 local return_dir='~'
 current_dir="${current_dir/#${HOME}/~}"

 # if we aren't in ~
 if [[ ${current_dir} != '~' ]]; then
   return_dir="${${${${(@j:/:M)${(@s:/:)current_dir}##.#?}:h}%/}//\%/%%}/${${current_dir:t}//\%/%%}"
 fi

 print ${return_dir}
}

gst_get_pwd() {
  prompt_short_dir="$(short_pwd)"
  git_root="$(command git rev-parse --show-toplevel 2> /dev/null)" && \
    prompt_short_dir="${prompt_short_dir#${$(short_pwd $git_root):h}/}"
  print "%F{2}${prompt_short_dir}%f " # green directory
}

prompt_cmder_precmd() {
  if [[ "$TERM_PROGRAM" == "iTerm.app" ]];then
    echo -ne "\e]1; ${PWD##*/} \a" # set title to short pwd
  fi

  if [ -n "$TMUX" ]; then
    tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD"
  fi

  # TODO: determine if this is useful to keep or not
  # PROMPT="$PROMPT"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'

  # PROMPT="$(gst_get_pwd)$(git_prompt_info)$(gst_get_suffix)"
  PROMPT="$(gst_get_prefix)$(gst_get_pwd)$(git_prompt_info)$(gst_get_suffix)" # indented prompt (space as prefix)
  RPROMPT="%*" # right end of the prompt, show time in 24 hours format with seconds
}

prompt_cmder_setup() {
  # ZSH_THEME_GIT_PROMPT_PREFIX="%F{4}"
  # ZSH_THEME_GIT_PROMPT_SUFFIX="%f "
  # ZSH_THEME_GIT_PROMPT_DIRTY="%F{3}*%f"
  # ZSH_THEME_GIT_PROMPT_CLEAN=""

  ZSH_THEME_GIT_PROMPT_PREFIX=""
  ZSH_THEME_GIT_PROMPT_SUFFIX="%f "
  ZSH_THEME_GIT_PROMPT_DIRTY="%F{3}" # yellow
  ZSH_THEME_GIT_PROMPT_CLEAN="%F{4}" # blue

  # autoload -Uz colors && colors
  autoload -Uz add-zsh-hook
  add-zsh-hook precmd prompt_cmder_precmd
  prompt_opts=(cr subst percent)
}

prompt_cmder_setup "$@"
